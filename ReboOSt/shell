local oldpe = os.pullEvent
local yau = "Enter Home, Exit, Back or Start to go back"
local yaulen = string.len(yau)
local yaupos = (52 - yaulen) / 2

local function clear()
term.setBackgroundColor(colors.black)
term.setTextColor(sndtxt)
term.clear()
term.setBackgroundColor(tbar)
term.setCursorPos(1,1)
print("                                                   ")
term.setCursorPos(yaupos,1)
write("Enter ")
term.setTextColor(prog)
write("Home, Exit, Back")
term.setTextColor(sndtxt)
write(" or ")
term.setTextColor(prog)
write("Start")
term.setTextColor(sndtxt)
print(" to go back")
term.setBackgroundColor(colors.black)
print("")

term.setTextColor(tbartxt)
end
clear()
while true do
 term.setTextColor(tbartxt)
 local currdir = shell.dir()
 write(currdir.." -> ")
 os.pullEvent = os.pullEventRaw
 local input = read()
 local linput = string.lower(input)
 os.pullEvent = oldpe
 if linput:find('reboost') or linput:find("programs") or (linput:find("rm") and linput:find("user")) or (linput:find("rename") and linput:find("user")) or (linput:find("mv") and linput:find("user")) or (linput:find("move") and linput:find("user")) or linput:find("meta") or linput:find("startup") then
  term.setTextColor(colors.red)
  print("Forbidden Command!")
 elseif linput == "start" or linput == "home" or linput == "exit" or linput == "back" or linput == "close" then
  if rosloging then
   roslog.writeLine(shell.getRunningProgram()..": going back to mainframe")
  end
  break
 elseif linput == "reboot" then
  instashut = true
  shell.run("/ReboOSt/reboot")
 elseif linput == "shutdown" then
  instashut = true
  shell.run("/ReboOSt/shut-off")
 elseif linput == "about" then
  term.setTextColor(sndtxt)
  print("ReboOSt was originally build upon ApfelOS. While ReboOSt still contains some of the internal Workloads, it was massively improved.")
 elseif linput == "themes" then
  term.setTextColor(sndtxt)
  print([[Usage: -view        --shows current theme setting
       -modify      --changes theme settings
       -modify:all  --changes theme in luaIDE
       -save        --saves current config
       -discard     --returns to old config
       -gui         --opens Graphical Interface]])
  term.setTextColor(tbartxt)
 elseif linput == "themes -gui" then
  if rosloging then
   roslog.writeLine(shell.getRunningProgram()..": executing '/ReboOSt/thmchg'")
  end
  shell.run("/ReboOSt/thmchg")
  clear()
 elseif linput == "themes -discard" then
  if rosloging then
   roslog.writeLine("ReboOSt/thmchg -nogui: reloading current theme")
  end
  shell.run("/User/"..UserName.."/..colortheme")
  clear()
  term.setTextColor(sndtxt)
  print("Discarded current theme!")
  term.setTextColor(tbartxt)
 elseif linput == "themes -view" then
  if rosloging then
   roslog.writeLine(shell.getRunningProgram()..": opening colortheme")
  end
  term.setTextColor(sndtxt)
  print("tbar = "..tbar)
  print("mbar = "..mbar)
  print("body = "..body)
  print("bodyd = "..bodyd)
  print("crashscreen = "..crashscreen)
  print("crashscreentxt = "..crashscreentxt)
  print("prog = "..prog)
  print("tbartxt = "..tbartxt)
  print("mbartxt = "..mbartxt)
  print("bodytxt = "..bodytxt)
  print("sndtxt = "..sndtxt)
  term.setTextColor(tbartxt)
 elseif linput == "themes -modify:all" then
  if rosloging then
   roslog.writeLine(shell.getRunningProgram()..": opening colortheme with luaIDE")
  end
  shell.run("/ReboOSt/luaIDE", "/User/"..UserName.."/..colortheme")
  clear()
 elseif linput == "themes -modify" then
  print("Please specify the setting you want to change. (Variable Name)")
  write("   > ")
  os.pullEvent = os.pullEventRaw
  input = string.lower(read())
  os.pullEvent = oldpe
  local function onoff(var, vars)
   print("Which Color should "..vars.." get?")
   write("   > ")
   os.pullEvent = os.pullEventRaw
   input = read()
   os.pullEvent = oldpe
   if input == "black" then var = colors.black print(vars.." was changed to "..input)
   elseif input == "gray" then var = colors.gray print(vars.." was changed to "..input)
   elseif input == "lightGray" then var = colors.lightGray print(vars.." was changed to "..input)
   elseif input == "white" then var = colors.white print(vars.." was changed to "..input)
   elseif input == "yellow" then var = colors.yellow print(vars.." was changed to "..input)
   elseif input == "orange" then var = colors.orange print(vars.." was changed to "..input)
   elseif input == "red" then var = colors.red print(vars.." was changed to "..input)
   elseif input == "purple" then var = colors.purple print(vars.." was changed to "..input)
   elseif input == "magenta" then var = colors.magenta print(vars.." was changed to "..input)
   elseif input == "lightBlue" then var = colors.lightBlue print(vars.." was changed to "..input)
   elseif input == "cyan" then var = colors.cyan print(vars.." was changed to "..input)
   elseif input == "blue" then var = colors.blue print(vars.." was changed to "..input)
   elseif input == "green" then var = colors.green print(vars.." was changed to "..input)
   elseif input == "lime" then var = colors.lime print(vars.." was changed to "..input)
   elseif input == "pink" then var = colors.pink print(vars.." was changed to "..input)
   elseif input == "brown" then var = colors.brown print(vars.." was changed to "..input)
   if rosloging then
    roslog.writeLine("ReboOSt/thmchg -nogui: changed "..vars.." to "..input)
   end
   else
    print("Not a Color! Exiting...")
   end
   return var
  end
  if input == "tbar" then tbar = onoff(tbar, "Header BG")
  elseif input == "tbartxt" then tbartxt = onoff(tbartxt, "Header text")
  elseif input == "mbar" then mbar = onoff(mbar, "Panel BG")
  elseif input == "mbartxt" then mbartxt = onoff(mbartxt, "Panel text")
  elseif input == "body" then body = onoff(body, "Menu BG")
  elseif input == "bodytxt" then bodytxt = onoff(bodytxt, "Menu text")
  elseif input == "bodyd" then bodyd = onoff(bodyd, "Darker Menu Color")
  elseif input == "crashscreen" then crashscreen = onoff(crashscreen, "Crashscreen BG")
  elseif input == "crashscreentxt" then bodytxt = onoff(bodytxt, "Crashscreen text")
  elseif input == "prog" then prog = onoff(prog, "Program indicator text")
  elseif input == "sndtxt" then sndtxt = onoff(sndtxt, "Second text Color")
  else print("Not a Variable! Exiting...") end
 elseif linput == "themes -save" then
  if rosloging then
   roslog.writeLine("ReboOSt/thmchg -nogui: saving theme settings")
  end
  local file = fs.open("/User/"..UserName.."/..colortheme", "w")
  file.writeLine("tbar = "..tbar)
  file.writeLine("mbar = "..mbar)
  file.writeLine("body = "..body)
  file.writeLine("bodyd = "..bodyd)
  file.writeLine("crashscreen = "..tbar)
  file.writeLine("crashscreentxt = "..prog)
  file.writeLine("prog = "..prog)
  file.writeLine("tbartxt = "..tbartxt)
  file.writeLine("mbartxt = "..mbartxt)
  file.writeLine("bodytxt = "..bodytxt)
  file.writeLine("sndtxt = "..sndtxt)
  file.close()
  term.setTextColor(sndtxt)
  print("Theme saved!")
  term.setTextColor(tbartxt)
 elseif linput == "logcat" then
  if admin then
   if rosloging then
    roslog.writeLine(shell.getRunningProgram()..": executing 'sys/logcat'")
    roslog.close()
    if fs.exists("/ReboOSt/logs/"..starts..".txt") then
     local logcat = fs.open("/ReboOSt/logs/"..starts..".txt", "r")
     local logData = {}
     local line = logcat.readLine()
     repeat
     table.insert(logData,line)
     line = logcat.readLine()
     until line == nil
   	 logcat.close()
	 local k = #logData
	 for i=1, k, 1 do print(logData[i]) end
    end
    roslog = fs.open("/ReboOSt/logs/"..starts..".txt", "a")
   else
    print("This Command is only available, if you have logging enabled")
   end
  else
  term.setTextColor(colors.red)
  print("Forbidden Command!")
  end
 elseif linput == "settings" then
  if admin then
   term.setTextColor(sndtxt)
   print([[Usage: -view        --shows current config 
       -modify      --changes config
       -modify:all  --changes config in luaIDE
       -save        --saves current config
       -discard     --returns to old config
       -gui         --opens Graphical Interface]])
   term.setTextColor(tbartxt)
  else
   term.setTextColor(colors.red)
   print("Forbidden Command!")
  end
 elseif linput == "settings -gui" then
  if admin then
   if rosloging then
    roslog.writeLine(shell.getRunningProgram()..": executing '/ReboOSt/ctrlpnl'")
   end
   shell.run("/ReboOSt/ctrlpnl")
   clear()
  else
   term.setTextColor(colors.red)
   print("Forbidden Command!")
  end
 elseif linput == "settings -modify:all" then
  if admin then
   if rosloging then
    roslog.writeLine(shell.getRunningProgram()..": opening setting/main with luaIDE")
   end
   shell.run("/ReboOSt/luaIDE", "/ReboOSt/configs/main")
   clear()
  else
   term.setTextColor(colors.red)
   print("Forbidden Command!")
  end
 elseif linput == "settings -modify" then
  if admin then
  print("Please specify the setting you want to change. (Variable Name)")
  write("   > ")
  os.pullEvent = os.pullEventRaw
  input = string.lower(read())
  os.pullEvent = oldpe
  local function onoff(var, vars)
   print("Turn "..vars.." on or off?")
   write("   > ")
   os.pullEvent = os.pullEventRaw
   input = string.lower(read())
   os.pullEvent = oldpe
   if input == "on" then
    var = true
	print(vars.." was changed to true.")
    if rosloging then
     roslog.writeLine("ReboOSt/ctrlpnl -nogui: changed "..vars.." to true")
    end
   elseif input == "off" then
    var = false
	print(vars.." was changed to false.")
    if rosloging then
     roslog.writeLine("ReboOSt/ctrlpnl -nogui: changed "..vars.." to false")
    end
   else
    print("Exiting...")
   end
   return var
  end
  if input == "autoupdate" then
   autoupdate = onoff(autoupdate, "Auto Update")
  elseif input == "rosdebug" then
   rosdebug = onoff(rosdebug, "Debug Mode")
  elseif input == "pfolder" then
   pfolder = onoff(pfolder, "Programs Folder icon")
  elseif input == "rosloging" then
   rosloging = onoff(rosloging, "Logfile")
  elseif input == "termstart" then
   termstart = onoff(termstart, "Shell after login")
  elseif input == "timeformat" then
   timeformat = onoff(timeformat, "24 hour clock")
  elseif input == "updatstream" then
   print("Turn Dev-Update-Stream on or off?")
   write("   > ")
   os.pullEvent = os.pullEventRaw
   input = string.lower(read())
   os.pullEvent = oldpe
   if input == "on" then
	print("You'll now get Updates from the Development-Stream")
	updatstream = "development"
    if rosloging then
     roslog.writeLine("ReboOSt/ctrlpnl -nogui: changed updatstream to development")
    end
   elseif input == "off" then
	print("You'll now get Updates from the Release-Stream")
	updatstream = "release"
    if rosloging then
     roslog.writeLine("ReboOSt/ctrlpnl -nogui: changed updatstream to release")
    end
   else
    print("Exiting...")
   end
  else
   print("Not a setting! Exiting...")
  end
  else
   term.setTextColor(colors.red)
   print("Forbidden Command!")
  end
 elseif linput == "settings -discard" then
  if admin then
   if rosloging then
    roslog.writeLine("ReboOSt/ctrlpnl: reloading main config")
   end
   shell.run("/ReboOSt/configs/main")
  else
   term.setTextColor(colors.red)
   print("Forbidden Command!")
  end
 elseif linput == "settings -save" then
  if admin then
   if rosloging then
    roslog.writeLine(shell.getRunningProgram()..": saved new settings.")
    roslog.write(shell.getRunningProgram()..": new settings are:  autoupdate = ")
    if autoupdate then roslog.write("true ; ") else roslog.write("false ; ") end
    roslog.write("rosdebug = ") if rosdebug then roslog.write("true ; ") else roslog.write("false ; ") end
    roslog.write("pfolder = ") if pfolder then roslog.write("true ; ") else roslog.write("false ; ") end
    roslog.write("termstart = ") if termstart then roslog.write("true ; ") else roslog.write("false ; ") end
    roslog.write("rosloging = ") if rosloging then roslog.write("true ; ") else roslog.write("false ; ") end
	roslog.write("timeformat = ") if timeformat then roslog.write("true ; ") else roslog.write("false ; ") end
    roslog.writeLine("updatstream = '"..updatstream.."'")
   end
   local file = fs.open("/ReboOSt/configs/main", "w")
   if autoupdate then
    file.writeLine("autoupdate = true")
   else
    file.writeLine("autoupdate = false")
   end
   if rosdebug then
    file.writeLine("rosdebug = true")
   else
    file.writeLine("rosdebug = false")
   end
   if pfolder then
    file.writeLine("pfolder = true")
   else
    file.writeLine("pfolder = false")
   end
   if termstart then
    file.writeLine("termstart = true")
   else
    file.writeLine("termstart = false")
   end
   if timeformat then
    file.writeLine("timeformat = true")
   else
    file.writeLine("timeformat = false")
   end
   if rosloging then
    file.writeLine("rosloging = true")
   else
    file.writeLine("rosloging = false")
   end
   file.writeLine('updatstream = "'..updatstream..'"')
   file.close()
   print("Settings Saved!")
  else
   term.setTextColor(colors.red)
   print("Forbidden Command!")
  end
 elseif linput == "settings -view" then
  if admin then
   if rosloging then
    roslog.writeLine(shell.getRunningProgram()..": opening main config")
   end
   term.setTextColor(sndtxt)
   write("autoupdate = ") if autoupdate then print("true") else print("false") end
   write("rosdebug = ") if rosdebug then print("true") else print("false") end
   write("pfolder = ") if pfolder then print("true") else print("false") end
   write("gfolder = ") if gfolder then print("true") else print("false") end
   write("termstart = ") if tempstart then print("true") else print("false") end
   write("timeformat = ") if timeformat then print("true") else print("false") end
   print("updatstream = "..updatstream)
   term.setTextColor(tbartxt)
  else
   term.setTextColor(colors.red)
   print("Forbidden Command!")
  end
 elseif linput == "shell" then
  term.setTextColor(sndtxt)
  write("This is ReboOSt Shell. Basicly it is just another GUI for ReboOSt. Use ")
  term.setTextColor(prog)
  write("shell -? or shell -help")
  term.setTextColor(sndtxt)
  print(" for extra ReboOSt commands.")
 elseif linput == "shell -?" or linput == "shell -help" then
  term.setTextColor(sndtxt)
  print([[-- These Commands can be used by a standart user --
Use "themes" to modify the current theme.
Use "files" to open File Browser.
Use "sketch" to open sketch from anywhere.

--      These commands require admin rights      --
Use "settings" to modify current settings.
Use "passwd" to change your and other's passwords.
Use "logcat" to view current log, if loging is enabled.]])
  term.setTextColor(tbartxt)
 elseif linput == "files" then
  shell.run("/ReboOSt/fbrws")
  clear()
 elseif linput == "luaide" then
  shell.run("/ReboOSt/luaIDE")
  clear()
 elseif linput == "sketch" then
  shell.run("/Programs/sketch")
  clear()
 elseif linput == "clear" then
  clear()
 elseif linput == "passwd" then
  if admin then
   print("Do you want to change your own Password or one from another account?")
   write("Y/N: ")
   input = read()
   input = string.lower(input)
  else
   input = "y"
  end
  if input == "y" then
   write("New Password: ")
   local npw = read("*")
   write("Repeat new Password: ")
   local npwd = read("*")
   if npw == npwd then
    npwd = encryption.sha256(npw)
    local file = fs.open("/User/"..UserName.."/..meta", "r")
    local metaData = {}
    local line = file.readLine()
    repeat
    table.insert(metaData,line)
    line = file.readLine()
    until line == nil
	file.close()
    local file = fs.open("/User/"..UserName.."/..meta", "w")
    file.writeLine(npwd)
    file.writeLine(metaData[2])
    file.close()
	npw = nil
	npwd = nil
	metaData = nil
    if rosloging then
     roslog.writeLine("ReboOSt/regist: chenged Password from "..UserName.."sucessfull")
    end
	print("Changed password sucessfully!")
   else
    print("Passwords don't match. Exiting...")
   end
  elseif input == "n" then
   write("Account: ")
   local apwc = read()
   if fs.exists("/User/"..apwc) then
    write("Old Password: ")
	local opw = read("*")
	opw = encryption.sha256(opw)
    local file = fs.open("/User/"..apwc.."/..meta", "r")
    local metaData = {}
    local line = file.readLine()
    repeat
    table.insert(metaData,line)
    line = file.readLine()
    until line == nil
	file.close()
	if opw == metaData[1] then
	 write("New Password: ")
	 local npw = read("*")
	 write("Repeat new Password: ")
	 local npwd = read("*")
	 if npw == npwd then
	  npwd = encryption.sha256(npw)
      local file = fs.open("/User/"..apwc.."/..meta", "w")
      file.writeLine(npwd)
      file.writeLine(metaData[2])
      file.close()
	  opw = nil
  	  npw = nil
	  npwd = nil
	  metaData = nil
     if rosloging then
      roslog.writeLine("ReboOSt/regist -nogui: changed Password from "..apwc.." successfull")
     end
	 else
	  print("Passwords don't match! Exiting...")
	  opw = nil
  	  npw = nil
	  npwd = nil
	  metaData = nil
	 end
	else
	 print("Wrong Password! Exiting...")
	 opw = nil
	 metaData = nil
	end
   else
    print("User doesn't exists! Exiting...")
   end
  else
   print(input.." is not a choise! Exiting...")
  end
 elseif linput == "debug" then
  if admin then
  if rosdebug then
   write("Please enter Mainainance Password: ")
   os.pullEvent = os.pullEventRaw
   input = read("*")
   local inpute = encryption.sha256(input)
    if inpute == "990b807552e98a071be5f51d47d7453c8df1770c12d15fdacac1986646db8e9d" then
    print("Warning! This is very experimental and you can break the whole OS with it! Use at your own risk! Also most of the shell commands don't work here! Enter close to get back to normal shell.")
    local debugshell = true
    while true do
     term.setTextColor(sndtxt)
     write(currdir.." -> ")
     term.setTextColor(tbartxt)
     os.pullEvent = os.pullEventRaw
     input = read()
     os.pullEvent = oldpe
     linput = string.lower(input)
     if linput == "cpass" then
      print("What User do you want to edit?")
 	  term.setTextColor(sndtxt)
      write("cpass > ")
  	  term.setTextColor(tbartxt)
      os.pullEvent = os.pullEventRaw
      ouser = read()
	  if ouser == "" then
	   print("Please enter a username! Exiting...")
      elseif fs.exists("/User/"..ouser) then
       print("Enter new User Name")
	   term.setTextColor(sndtxt)
	   write("cpass > ")
	   term.setTextColor(tbartxt)
	   os.pullEvent = os.pullEventRaw
	   nuser = read()
	   lnuser = string.lower(input)
	   os.pullEvent = oldpe
	   if nuser == "" or lnuser == "root" or lnuser == "reboot" or lnuser == "shutdown" then
	    print("Forbidden Username! Exiting.")
	   else
	    fs.move("/User/"..ouser , "/User/"..nuser)
	    print("Please enter new Password")
	    term.setTextColor(sndtxt)
	    write("cpass > ")
	    term.setTextColor(tbartxt)
	    os.pullEvent = os.pullEventRaw
	    local pass = read()
	    local passe = encryption.sha256(pass)
	    local file = fs.open("/User/"..nuser.."/..meta", "r")
	    local metaData = {}
	    local line = file.readLine()
	    repeat
	    table.insert(metaData,line)
	    line = file.readLine()
	    until line == nil
		file.close()
	    local file = fs.open("/User/"..Name.."/..meta", "w")
	    file.writeLine(passe)
	    file.writeLine(metaData[2])
	    file.close()
	    passe = nil
	    pass = nil
	   end
      else
       print("User doesn't exists! Exiting.")
      end
     elseif linput == "close" or linput == "exit" then
	  debugshell = false
      print("Exiting debug shell...")
      break
     else
      shell.run(input)
     end
    end
    else
     print("Wrong Password! Exiting...")
    end
  else
  print("Debug Mode must be enabled!")
  end
  else
   term.setTextColor(colors.red)
   print("Forbidden Command!")
  end
 else
  shell.run(input)
 end
end
