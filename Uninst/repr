local function GitHubGet(branch)
    local gitPath = "/"
    local banch = branch or nil
    local URL = "https://api.github.com/repos/Chickenbreadlp/ReboOSt/contents/" .. (branch and "?ref=" or "") .. (branch or "")
    local removeLuaExtention = true
    
    function getFileDownloadURLs(url, gatheredFiles, gatheredDirectories)
        assert(url, "url invalid")
        local handle = assert(http.get(url), "Getting " .. url .. " failed")
        local json = assert(handle.readAll(), "Reading failed for url " .. url)
        json = json:gsub("%s*\n%s*", "") --removes white space around '\n' and '\n'
        json = json:gsub("\"([^\"]*)\"%s*:%s*", "%1 = ") --turns '"hi": ' into 'hi = '
        json = json:sub(2, #json - 1) --removes brackets around the almostJSON
        json = "{" .. json .. "}" --adds curly brackets
        local jsonTable = assert(textutils.unserialize(json), "Failed to unserialize:\n" .. json)
        local files = gatheredFiles or {}
        local directories = gatheredDirectories or {}
        for k, v in ipairs(jsonTable) do
            if v.type == "file" then
                files[#files + 1] = {url = v.download_url, path = v.path}
            elseif v.type == "dir" then
                directories[#directories + 1] = v.url
            end
        end
        local recursiveURL = directories[1]
        if not recursiveURL then
            return files
        end
        if recursiveURL then
            table.remove(directories, 1)
            return getFileDownloadURLs(recursiveURL, files, directories)
        end
    end

    for k, v in ipairs(getFileDownloadURLs(URL)) do
        if (v.path:sub(#v.path - 3) == ".lua") and removeLuaExtention then
            v.path = v.path:sub(1, #v.path - 4)
        end
        local writeFile = fs.open("/" .. v.path, "w")
        local webHandle = assert(http.get(v.url), "Getting " .. v.url .. " failed")
        local webContents = assert(webHandle.readAll(), "Reading " .. v.url .. " failed")
        writeFile.write(webContents)
        writeFile.close()
    end
end

term.setBackgroundColor(colors.gray)
term.clear()
term.setCursorPos(1,1)
term.setTextColor(1)
print("ReboOSt Installation")
term.setTextColor(colors.cyan)
print("")
print("You want to repair ReboOSt. This deletes any custom")
print(" mod which you have installed.                     ")
print("")
print("")
term.setCursorPos(1,18)
term.setTextColor(16)
print("                 Preparing Setup!                  ")
term.setTextColor(1)
term.setBackgroundColor(colors.gray)
term.clear()
term.setCursorPos(1,1)
term.setTextColor(1)
print("ReboOSt Installation")
term.setTextColor(colors.cyan)
print("")
print("ReboOSt is now repairing.")

if fs.exists("/User") then
 fs.makeDir("/Uninst/Backup")
 fs.copy("/User", "/Uninst/Backup/User")
end
if fs.exists("/ReboOSt/configs/colortheme") then
 fs.makeDir("/Uninst/Backup")
 fs.copy("/ReboOSt/configs/colortheme", "/Uninst/Backup/colortheme")
end
if fs.exists("/ReboOSt/configs/main") then
 fs.makeDir("/Uninst/Backup")
 fs.copy("/ReboOSt/configs/main", "/Uninst/Backup/mainconf")
end
if fs.exists("/ReboOSt/configs/browser") then
 fs.makeDir("/Uninst/Backup")
 fs.copy("/ReboOSt/configs/brwoser", "/Uninst/Backup/brwsconf")
end
if fs.exists("/ReboOSt/configs/stcount") then
 fs.makeDir("/Uninst/Backup")
 fs.copy("/ReboOSt/configs/stcount", "/Uninst/Backup/stcount")
end
if fs.exists("startup") then
 fs.delete("startup")
end
if fs.exists("Start") then
 fs.delete("Start")
end
if fs.exists("/ReboOSt") then
 fs.delete("/ReboOSt")
end
GitHubGet(nil)
fs.delete("/README.md")
fs.delete("/version")
fs.delete("/updat")
if fs.exists("/Uninst/Backup/User") then
 fs.copy("/Uninst/Backup/User", "/User")
end
if fs.exists("/Uninst/Backup/mainconf") then
 fs.delete("/ReboOSt/configs/main")
 fs.copy("/Uninst/Backup/mainconf", "/ReboOSt/configs/main")
end
if fs.exists("/Uninst/Backup/brwsconf") then
 fs.copy("/Uninst/Backup/brwsconf", "/ReboOSt/configs/browser")
end
if fs.exists("/Uninst/Backup/colortheme") then
 fs.delete("/ReboOSt/configs/colortheme")
 fs.copy("/Uninst/Backup/colortheme", "/ReboOSt/configs/colortheme")
end
if fs.exists("/Uninst/Backup/stcount") and fs.exists("/User") then
 fs.copy("/Uninst/Backup/stcount", "/ReboOSt/configs/stcount")
end
if fs.exists("/Uninst/Backup") then
 fs.delete("/Uninst/Backup")
end
term.setBackgroundColor(colors.gray)
term.clear()
term.setCursorPos(1,1)
term.setTextColor(1)
print("ReboOSt Installation")
term.setTextColor(colors.cyan)
print("")
print("ReboOSt is now repaired.")
print("The system will be rebooted any second.")
fs.delete("/Setup")
sleep(1)
os.reboot()
